// Code generated by 'go generate'; DO NOT EDIT.

package win32

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modole32    = windows.NewLazySystemDLL("ole32.dll")
	modoleaut32 = windows.NewLazySystemDLL("oleaut32.dll")

	procCoCreateInstance = modole32.NewProc("CoCreateInstance")
	procCoInitialize     = modole32.NewProc("CoInitialize")
	procCoInitializeEx   = modole32.NewProc("CoInitializeEx")
	procCoUninitialize   = modole32.NewProc("CoUninitialize")
	procVariantInit      = modoleaut32.NewProc("VariantInit")
)

func CoCreateInstance(rclsid REFCLSID, pUnkOuter LPUNKNOWN, dwClsContext DWORD, riid REFIID, ppv LPVOID) (hResult HRESULT) {
	r0, _, _ := syscall.Syscall6(procCoCreateInstance.Addr(), 5, uintptr(rclsid), uintptr(pUnkOuter), uintptr(dwClsContext), uintptr(riid), uintptr(ppv), 0)
	hResult = HRESULT(r0)
	return
}

func CoInitialize(pvReserved LPVOID) (hResult HRESULT) {
	r0, _, _ := syscall.Syscall(procCoInitialize.Addr(), 1, uintptr(pvReserved), 0, 0)
	hResult = HRESULT(r0)
	return
}

func CoInitializeEx(pvReserved LPVOID, dwCoInit DWORD) (hResult HRESULT) {
	r0, _, _ := syscall.Syscall(procCoInitializeEx.Addr(), 2, uintptr(pvReserved), uintptr(dwCoInit), 0)
	hResult = HRESULT(r0)
	return
}

func CoUninitialize() {
	syscall.Syscall(procCoUninitialize.Addr(), 0, 0, 0, 0)
	return
}

func VariantInit(pvarg *VARIANT) {
	syscall.Syscall(procVariantInit.Addr(), 1, uintptr(unsafe.Pointer(pvarg)), 0, 0)
	return
}
